name: Quality Control
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    name: CMake Build
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [ clang-12, clang-13, clang-14, gcc-11 ]
        build-type: [ Debug, Release ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build libsdl2-dev libcriterion-dev -y

      - name: Build
        run: |
          cmake -G Ninja -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} .
          ninja -j 0

  static-analysis:
    name: Static Analysis
    needs: [ build ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libsdl2-dev gcc-12 -y

      - name: Run GCC Static Analyzer
        run: |
          gcc-12 -v
          out=$(gcc-12 -fanalyzer -c src/*.c -Isrc); echo -e $out; if [[ $(echo $out | head -c1 | wc -c) > 1 ]]; then exit 1; fi # TODO: Use @Benzammour's fix

  unit-tests-with-sanitizers:
    name: Criterion Unit Tests with Sanitizers
    needs: [ static-analysis ]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config: [ { compiler: gcc, sanitizer: valgrind },
                  { compiler: clang-14, sanitizer: address },
                  { compiler: clang-14, sanitizer: undefined } ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build libsdl2-dev libcriterion-dev valgrind -y

      - name: Run Criterion test suite with sanitizer
        run: |
          mkdir build
          cmake -G Ninja -DCMAKE_C_COMPILER=${{ matrix.config.compiler }} -DCMAKE_BUILD_TYPE=Debug -DSANITIZE=${{ matrix.config.sanitizer }} -DTEST=1 . -B build
          ninja -j 0 -C build sanitize-test

  unit-tests:
    name: Criterion Unit Tests
    needs: [ unit-tests-with-sanitizers ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build libsdl2-dev libcriterion-dev -y
          pip install gcovr==5.0

      - name: Run Criterion test suite
        run: |
          mkdir build
          cmake -G Ninja -DCMAKE_C_COMPILER=gcc -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=1 -DTEST=1 . -B build
          ninja -j 0 -C build test

      - name: Run gcov
        run: |
          gcovr -r . --exclude=test/ --sonarqube > coverage.xml

      - name: Upload artifact (gcov report)
        uses: actions/upload-artifact@v3
        with:
          name: gcov-report
          path: ./coverage.xml

  sonarcloud:
    name: SonarCloud Analysis
    needs: [ unit-tests ]
    runs-on: ubuntu-22.04
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifact (gcov report)
        uses: actions/download-artifact@v3
        with:
          name: gcov-report

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install libsdl2-dev gcc-multilib ninja-build libcriterion-dev -y

      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -G Ninja . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} ninja -C build -j 0

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" \
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" \
            --define sonar.coverageReportPaths=coverage.xml
